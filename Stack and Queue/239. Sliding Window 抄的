class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length < k){
            return nums;
        }
        
        int len = nums.length - k + 1;
        int[] res = new int[len];
        
        int num = 0; 
        
        MyQueue myQueue = new MyQueue();
        for (int i = 0; i < k; i++){
            myQueue.add(nums[i]);
        }
        res[num]=myQueue.peek();
        num++;
        
        for (int i=k;i<nums.length;i++){
            myQueue.poll(nums[i-k]);
            myQueue.add(nums[i]);
            res[num]=myQueue.peek();
            num++;
        }
       return res; 
    } 
    
}

class MyQueue{
    Deque<Integer> deque = new LinkedList<>();
    
    public void poll (int val){
        if(!deque.isEmpty() && val == deque.peek()){
            deque.poll();
        }
    }
    
    public void add (int val){
        while(!deque.isEmpty() && val > deque.getLast()){
            deque.removeLast();
        }
        deque.add(val);
    }
    
    public int peek(){
        return deque.peek();
    }
    
    
}
