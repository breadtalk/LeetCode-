This one needs to be revisited. 
The edge case for while loop is very confusing

First method is to exchange starting from the last element. 

class Solution {
    public int removeElement(int[] nums, int val) {
        int start = 0;
        int count = 0;
        int end = nums.length-1;
        
        while(start<=end){
            while(nums[end]==val && end>start){
                count++;
                end--;
            }
            
            if(nums[start]==val){
                count++;
                int temp=nums[start];
                nums[start]=nums[end];
                nums[end]=temp;
                start++;
                end--;
            }
            else{
                start++;
            }
        }
        return nums.length-count;
        
    }
    
}




Second method is to use two 指针 同方向指针is easier



class Solution {
    public int removeElement(int[] nums, int val) {
        int fastIndex=0;
        int slowIndex=0;
        while(fastIndex<=nums.length-1){
            if(nums[fastIndex]!=val){
                nums[slowIndex]=nums[fastIndex];
                fastIndex++;
                slowIndex++;
            }
            else{
                fastIndex++;
            }
            
        }
        return slowIndex;
    }
}



