用两个指针

class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] squares = new int[nums.length];
        if(nums[0]>=0){
            for(int i=0;i<nums.length;i++){
                squares[i]=nums[i]*nums[i];
            }
        }
        else if(nums[nums.length-1]<=0){
            for(int i=0;i<nums.length;i++){
                squares[i]=nums[nums.length-1-i]*nums[nums.length-1-i];
            }
        }
        else{
            int posIdx=0;
            int negIdx=0;
            while(nums[negIdx]<0){
                negIdx++;
            }
            posIdx=negIdx;
            negIdx=negIdx-1;
            int j=0;

            while(negIdx>=0 && posIdx <= nums.length-1){
                if (nums[posIdx]<(-1)*nums[negIdx]){
                    squares[j]=nums[posIdx]*nums[posIdx];
                    posIdx++;
                    j++;
                }
                else{
                    squares[j]=nums[negIdx]*nums[negIdx];
                    negIdx--;
                    j++;
                }
            }
            while(negIdx>=0){
                squares[j]=nums[negIdx]*nums[negIdx];
                negIdx--;
                j++;
            }
            while(posIdx<=nums.length-1){
                squares[j]=nums[posIdx]*nums[posIdx];
                posIdx++;
                j++;
            }
        }
        return squares;
    }
}



第二个办法 最大值永远在两端 所以只要比较两端就可以了

class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] squares = new int[nums.length];
        int i=0;
        int j=nums.length-1;
        int pos = nums.length-1;
        while(i<=j){
            if(nums[j]*nums[j]>=nums[i]*nums[i]){
                squares[pos]=nums[j]*nums[j];
                j--;
                pos--;
            }
            else{
                squares[pos]=nums[i]*nums[i];
                i++;
                pos--;
            }
        }
        
       return squares; 
    }
}
